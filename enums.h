/*! \file
    \brief Autogenerated enumerations (Umba Enum Gen)
 */

#pragma once


#include "marty_cpp/marty_enum.h"
#include "marty_cpp/marty_flag_ops.h"
#include "marty_cpp/marty_flags.h"

#include <exception>
#include <map>
#include <set>
#include <stdexcept>
#include <string>
#include <unordered_map>
#include <unordered_set>



namespace marty{
namespace expressions{


/*! Operator associativity */
//#!Associativity
enum class Associativity : std::uint32_t
{
    unknown   = (std::uint32_t)(-1) /*!< ! */,
    invalid   = (std::uint32_t)(-1) /*!< ! */,
    none      = 0x00 /*!<  */,
    left      = 0x01 /*!< left-hand operator */,
    right     = 0x02 /*!< right-hand operator */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(Associativity)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( Associativity, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Associativity::unknown   , "Unknown" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Associativity::none      , "None"    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Associativity::left      , "Left"    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Associativity::right     , "Right"   );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( Associativity, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( Associativity, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Associativity::unknown   , "unknown" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Associativity::unknown   , "invalid" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Associativity::none      , "none"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Associativity::left      , "left"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Associativity::right     , "right"   );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( Associativity, std::map, 1 )



/*! Operators arity - unary, binary, ternary etc. Also holds prefix/postfix attribute for unary operators. */
//#!OperatorArity
enum class OperatorArity : std::uint32_t
{
    unknown          = (std::uint32_t)(-1) /*!< ! */,
    invalid          = (std::uint32_t)(-1) /*!< ! */,
    none             = 0x00 /*!< Zero number of operands */,
    nonary           = 0x00 /*!< Zero number of operands */,
    unary            = 0x01 /*!< Unary operator. Mutually exclusive with `ternary` and `nAry` flags. */,
    binary           = 0x02 /*!< Binary operator. Mutually exclusive with `ternary` and `nAry` flags. */,
    ternary          = 0x04 /*!< Ternary operator. Mutually exclusive with other arity flags. */,
    nAry             = 0x08 /*!< N-arity. Mutually exclusive with other arity flags. */,
    prefix           = 0x10 /*!< Prefix mode allowed for operator */,
    postfix          = 0x20 /*!< Postfix mode allowed for operator */,
    unaryBinary      = unary  | binary /*!< Unary or binary operator */,
    prefixPostfix    = prefix | postfix /*!< Prefix or postfix form allowed */,
    fixedArityMask   = unary | binary | ternary /*!< Mask to pick out fixed size arity */,
    arityMask        = fixedArityMask | nAry /*!< Mask to pick out arity */,
    prepostMask      = prefix | postfix /*!< Mask to pick out pre/post flags */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(OperatorArity)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( OperatorArity, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::prefix           , "Prefix"         );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::unknown          , "Unknown"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::none             , "None"           );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::ternary          , "Ternary"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::unary            , "Unary"          );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::binary           , "Binary"         );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::nAry             , "NAry"           );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::arityMask        , "ArityMask"      );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::postfix          , "Postfix"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::unaryBinary      , "UnaryBinary"    );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::prefixPostfix    , "PrefixPostfix"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::fixedArityMask   , "FixedArityMask" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( OperatorArity, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( OperatorArity, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::prefix           , "prefix"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unknown          , "unknown"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unknown          , "invalid"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::none             , "none"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::none             , "nonary"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::ternary          , "ternary"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unary            , "unary"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::binary           , "binary"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::nAry             , "n-ary"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::nAry             , "n_ary"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::nAry             , "nary"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::arityMask        , "arity-mask"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::arityMask        , "arity_mask"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::arityMask        , "aritymask"        );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::postfix          , "postfix"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unaryBinary      , "unary-binary"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unaryBinary      , "unary_binary"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unaryBinary      , "unarybinary"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::prefixPostfix    , "prepost_mask"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::prefixPostfix    , "prefix-postfix"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::prefixPostfix    , "prefix_postfix"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::prefixPostfix    , "prefixpostfix"    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::prefixPostfix    , "prepost-mask"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::prefixPostfix    , "prepostmask"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::fixedArityMask   , "fixed-arity-mask" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::fixedArityMask   , "fixed_arity_mask" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::fixedArityMask   , "fixedaritymask"   );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( OperatorArity, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_SERIALIZE_SET(OperatorArity, std::set)

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_SET(OperatorArity, std::set)

} // namespace expressions
} // namespace marty

