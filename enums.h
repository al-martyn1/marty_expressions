/*! \file
    \brief Autogenerated enumerations (Umba Enum Gen)
 */

#pragma once


#include "marty_cpp/marty_enum.h"
#include "marty_cpp/marty_flag_ops.h"
#include "marty_cpp/marty_flags.h"

#include <exception>
#include <map>
#include <set>
#include <stdexcept>
#include <string>
#include <unordered_map>
#include <unordered_set>



namespace marty{
namespace expressions{


/*! Brackets functionality */
//#!BracketKind
enum class BracketKind : std::uint32_t
{
    unknown   = (std::uint32_t)(-1) /*!< ! */,
    invalid   = (std::uint32_t)(-1) /*!< ! */,
    none      = 0x00 /*!< Returned for non-bracket symbols */,
    open      = 0x01 /*!< Open bracket */,
    close     = 0x02 /*!< Close bracket */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(BracketKind)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( BracketKind, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( BracketKind::open      , "Open"    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( BracketKind::unknown   , "Unknown" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( BracketKind::close     , "Close"   );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( BracketKind::none      , "None"    );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( BracketKind, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( BracketKind, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( BracketKind::open      , "open"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( BracketKind::unknown   , "unknown" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( BracketKind::unknown   , "invalid" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( BracketKind::close     , "close"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( BracketKind::none      , "none"    );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( BracketKind, std::map, 1 )



/*! Error codes */
//#!Error
enum class Error : std::uint32_t
{
    unknown                           = (std::uint32_t)(-1) /*!< ! */,
    invalid                           = (std::uint32_t)(-1) /*!< ! */,
    none                              = 0x00 /*!< no error - all is OK */,
    no                                = 0x00 /*!< no error - all is OK */,
    ok                                = 0x00 /*!< no error - all is OK */,
    noError                           = 0x00 /*!< no error - all is OK */,
    errorParserState                  = 0x01 /*!< parser already is in an eror state */,
    unknownParserState                = 0x02 /*!< parser is in an unknown state */,
    notImplemented                    = 0x03 /*!< feature not implemented */,
    gotNonUnaryOrNonPrefixOp          = 0x04 /*!< got non-unary or non-prefix operator */,
    gotNonUnaryOp                     = 0x05 /*!< got non-unary operator */,
    gotNonPrefixOp                    = 0x06 /*!< got non-prefix operator */,
    gotOperator                       = 0x07 /*!< got operator */,
    gotUnaryNonPostfixOp              = 0x08 /*!< got unary non-prefix operator */,
    gotUnexpectedVariable             = 0x09 /*!< got unexpected variable */,
    gotUnexpectedConstant             = 0x0A /*!< got unexpected constant */,
    gotUnexpectedOperator             = 0x0B /*!< got unexpected operator */,
    gotUnexpectedOpeningParenthesis   = 0x0C /*!< got unexpected opening parenthesis */,
    gotUnexpectedClosingParenthesis   = 0x0D /*!< got unexpected closing parenthesis */,
    gotUnexpectedToken                = 0x0E /*!< got unexpected token */,
    gotUnbalancedParenthesis          = 0x0F /*!< got open/close parenthesis balance mismatch */,
    unexpectedEnd                     = 0x10 /*!< got unexpected end of expression */,
    parenthesisBalanceBroken          = 0x11 /*!< the balance of the parenthesis is broken */,
    missingClosing                    = 0x12 /*!< the balance of the parenthesis is broken */,
    somethingGoesWrong                = 0x13 /*!< something goes wrong */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(Error)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( Error, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::unknown                           , "Unknown"                         );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::none                              , "None"                            );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::unknownParserState                , "UnknownParserState"              );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotUnexpectedToken                , "GotUnexpectedToken"              );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::errorParserState                  , "ErrorParserState"                );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::notImplemented                    , "NotImplemented"                  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotUnexpectedOperator             , "GotUnexpectedOperator"           );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotNonUnaryOrNonPrefixOp          , "GotNonUnaryOrNonPrefixOp"        );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotNonUnaryOp                     , "GotNonUnaryOp"                   );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotNonPrefixOp                    , "GotNonPrefixOp"                  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotOperator                       , "GotOperator"                     );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotUnaryNonPostfixOp              , "GotUnaryNonPostfixOp"            );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotUnexpectedVariable             , "GotUnexpectedVariable"           );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotUnbalancedParenthesis          , "GotUnbalancedParenthesis"        );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotUnexpectedConstant             , "GotUnexpectedConstant"           );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotUnexpectedOpeningParenthesis   , "GotUnexpectedOpeningParenthesis" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::gotUnexpectedClosingParenthesis   , "GotUnexpectedClosingParenthesis" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::unexpectedEnd                     , "UnexpectedEnd"                   );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::parenthesisBalanceBroken          , "ParenthesisBalanceBroken"        );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::missingClosing                    , "MissingClosing"                  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( Error::somethingGoesWrong                , "SomethingGoesWrong"              );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( Error, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( Error, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::unknown                           , "unknown"                            );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::unknown                           , "invalid"                            );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::none                              , "none"                               );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::none                              , "no"                                 );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::none                              , "no_error"                           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::none                              , "ok"                                 );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::none                              , "no-error"                           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::none                              , "noerror"                            );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::unknownParserState                , "unknown-parser-state"               );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::unknownParserState                , "unknown_parser_state"               );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::unknownParserState                , "unknownparserstate"                 );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedToken                , "got-unexpected-token"               );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedToken                , "got_unexpected_token"               );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedToken                , "gotunexpectedtoken"                 );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::errorParserState                  , "error-parser-state"                 );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::errorParserState                  , "error_parser_state"                 );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::errorParserState                  , "errorparserstate"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::notImplemented                    , "not-implemented"                    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::notImplemented                    , "not_implemented"                    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::notImplemented                    , "notimplemented"                     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedOperator             , "got-unexpected-operator"            );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedOperator             , "got_unexpected_operator"            );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedOperator             , "gotunexpectedoperator"              );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotNonUnaryOrNonPrefixOp          , "got-non-unary-or-non-prefix-op"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotNonUnaryOrNonPrefixOp          , "got_non_unary_or_non_prefix_op"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotNonUnaryOrNonPrefixOp          , "gotnonunaryornonprefixop"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotNonUnaryOp                     , "got-non-unary-op"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotNonUnaryOp                     , "got_non_unary_op"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotNonUnaryOp                     , "gotnonunaryop"                      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotNonPrefixOp                    , "got-non-prefix-op"                  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotNonPrefixOp                    , "got_non_prefix_op"                  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotNonPrefixOp                    , "gotnonprefixop"                     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotOperator                       , "got-operator"                       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotOperator                       , "got_operator"                       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotOperator                       , "gotoperator"                        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnaryNonPostfixOp              , "got-unary-non-postfix-op"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnaryNonPostfixOp              , "got_unary_non_postfix_op"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnaryNonPostfixOp              , "gotunarynonpostfixop"               );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedVariable             , "got-unexpected-variable"            );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedVariable             , "got_unexpected_variable"            );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedVariable             , "gotunexpectedvariable"              );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnbalancedParenthesis          , "got-unbalanced-parenthesis"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnbalancedParenthesis          , "got_unbalanced_parenthesis"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnbalancedParenthesis          , "gotunbalancedparenthesis"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedConstant             , "got-unexpected-constant"            );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedConstant             , "got_unexpected_constant"            );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedConstant             , "gotunexpectedconstant"              );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedOpeningParenthesis   , "got-unexpected-opening-parenthesis" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedOpeningParenthesis   , "got_unexpected_opening_parenthesis" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedOpeningParenthesis   , "gotunexpectedopeningparenthesis"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedClosingParenthesis   , "got-unexpected-closing-parenthesis" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedClosingParenthesis   , "got_unexpected_closing_parenthesis" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::gotUnexpectedClosingParenthesis   , "gotunexpectedclosingparenthesis"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::unexpectedEnd                     , "unexpected-end"                     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::unexpectedEnd                     , "unexpected_end"                     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::unexpectedEnd                     , "unexpectedend"                      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::parenthesisBalanceBroken          , "parenthesis-balance-broken"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::parenthesisBalanceBroken          , "parenthesisbalancebroken"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::parenthesisBalanceBroken          , "parenthesis_balance_broken"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::missingClosing                    , "missing-closing"                    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::missingClosing                    , "missing_closing"                    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::missingClosing                    , "missingclosing"                     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::somethingGoesWrong                , "something-goes-wrong"               );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::somethingGoesWrong                , "something_goes_wrong"               );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( Error::somethingGoesWrong                , "somethinggoeswrong"                 );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( Error, std::map, 1 )



/*! Parser states */
//#!ParserState
enum class ParserState : std::uint32_t
{
    unknown                      = (std::uint32_t)(-1) /*!< !Unknown parser state */,
    invalid                      = (std::uint32_t)(-1) /*!< !Unknown parser state */,
    waitUnaryPrefixOpOrValue     = 0x00 /*!< unary prefix operator, variable, function or literal */,
    initial                      = 0x00 /*!< unary prefix operator, variable, function or literal */,
    waitOperator                 = 0x01 /*!< unary postfix operator, binary, ternary or n-Ary operator */,
    waitOperatorOrFunctionCall   = 0x02 /*!< binary, ternary or n-Ary operator or function call */,
    waitOperand                  = 0x03 /*!< operand (literal or variable) */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(ParserState)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( ParserState, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ParserState::unknown                      , "Unknown"                    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ParserState::waitUnaryPrefixOpOrValue     , "WaitUnaryPrefixOpOrValue"   );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ParserState::waitOperator                 , "WaitOperator"               );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ParserState::waitOperand                  , "WaitOperand"                );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ParserState::waitOperatorOrFunctionCall   , "WaitOperatorOrFunctionCall" );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( ParserState, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( ParserState, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::unknown                      , "unknown"                        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::unknown                      , "invalid"                        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitUnaryPrefixOpOrValue     , "initial"                        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitUnaryPrefixOpOrValue     , "wait-unary-prefix-op-or-value"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitUnaryPrefixOpOrValue     , "wait_unary_prefix_op_or_value"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitUnaryPrefixOpOrValue     , "waitunaryprefixoporvalue"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitOperator                 , "wait-operator"                  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitOperator                 , "wait_operator"                  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitOperator                 , "waitoperator"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitOperand                  , "wait-operand"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitOperand                  , "wait_operand"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitOperand                  , "waitoperand"                    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitOperatorOrFunctionCall   , "wait-operator-or-function-call" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitOperatorOrFunctionCall   , "wait_operator_or_function_call" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ParserState::waitOperatorOrFunctionCall   , "waitoperatororfunctioncall"     );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( ParserState, std::map, 1 )



/*! Error codes */
//#!ItemType
enum class ItemType : std::uint32_t
{
    unknown                = (std::uint32_t)(-1) /*!< ! */,
    invalid                = (std::uint32_t)(-1) /*!< ! */,
    void_                  = 0x00 /*!<  */,
    operator_              = 0x01 /*!<  */,
    boolLiteral            = 0x02 /*!<  */,
    integerLiteral         = 0x03 /*!<  */,
    floatingPointLiteral   = 0x04 /*!<  */,
    stringLiteral          = 0x05 /*!<  */,
    symbolLiteral          = 0x06 /*!<  */,
    identifier             = 0x07 /*!<  */,
    expressionEntry        = 0x08 /*!<  */,
    functionCall           = 0x09 /*!<  */,
    functionalCast         = 0x0A /*!<  */,
    cast                   = 0x0B /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(ItemType)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( ItemType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::unknown                , "Unknown"              );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::symbolLiteral          , "SymbolLiteral"        );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::void_                  , "Void"                 );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::operator_              , "Operator"             );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::integerLiteral         , "IntegerLiteral"       );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::boolLiteral            , "BoolLiteral"          );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::floatingPointLiteral   , "FloatingPointLiteral" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::stringLiteral          , "StringLiteral"        );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::identifier             , "Identifier"           );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::expressionEntry        , "ExpressionEntry"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::functionCall           , "FunctionCall"         );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::functionalCast         , "FunctionalCast"       );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( ItemType::cast                   , "Cast"                 );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( ItemType, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( ItemType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::unknown                , "unknown"                );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::unknown                , "invalid"                );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::symbolLiteral          , "symbol-literal"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::symbolLiteral          , "symbol_literal"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::symbolLiteral          , "symbolliteral"          );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::void_                  , "void"                   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::operator_              , "operator"               );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::integerLiteral         , "integer-literal"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::integerLiteral         , "integer_literal"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::integerLiteral         , "integerliteral"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::boolLiteral            , "bool-literal"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::boolLiteral            , "bool_literal"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::boolLiteral            , "boolliteral"            );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::floatingPointLiteral   , "floating-point-literal" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::floatingPointLiteral   , "floatingpointliteral"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::floatingPointLiteral   , "floating_point_literal" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::stringLiteral          , "string-literal"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::stringLiteral          , "string_literal"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::stringLiteral          , "stringliteral"          );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::identifier             , "identifier"             );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::expressionEntry        , "expression-entry"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::expressionEntry        , "expression_entry"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::expressionEntry        , "expressionentry"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::functionCall           , "function-call"          );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::functionCall           , "function_call"          );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::functionCall           , "functioncall"           );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::functionalCast         , "functional-cast"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::functionalCast         , "functional_cast"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::functionalCast         , "functionalcast"         );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( ItemType::cast                   , "cast"                   );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( ItemType, std::map, 1 )



/*! Conntext of token usage */
//#!TokenContext
enum class TokenContext : std::uint32_t
{
    unknown        = (std::uint32_t)(-1) /*!< ! */,
    invalid        = (std::uint32_t)(-1) /*!< ! */,
    normal         = 0x00 /*!< Parser is in normal state */,
    functionCall   = 0x01 /*!< Parser is currently parsing function call arguments list */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(TokenContext)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( TokenContext, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( TokenContext::unknown        , "Unknown"      );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( TokenContext::normal         , "Normal"       );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( TokenContext::functionCall   , "FunctionCall" );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( TokenContext, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( TokenContext, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( TokenContext::unknown        , "unknown"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( TokenContext::unknown        , "invalid"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( TokenContext::normal         , "normal"        );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( TokenContext::functionCall   , "function-call" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( TokenContext::functionCall   , "function_call" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( TokenContext::functionCall   , "functioncall"  );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( TokenContext, std::map, 1 )



/*! Operator type */
//#!OperatorFeatures
enum class OperatorFeatures : std::uint32_t
{
    unknown                 = (std::uint32_t)(-1) /*!< ! */,
    invalid                 = (std::uint32_t)(-1) /*!< ! */,
    none                    = 0x00 /*!< ! */,
    regular                 = 0x01 /*!<  */,
    scope                   = 0x02 /*!< Scope resolution operator */,
    groupping               = 0x04 /*!< Operations groupping for priority raising */,
    simpleCast              = 0x08 /*!< Simple (C-like) cast */,
    functionalCast          = 0x10 /*!< Functional cast */,
    functionCall            = 0x20 /*!< Function call */,
    indexation              = 0x40 /*!< Indexation */,
    templateInstantiation   = 0x80 /*!< Template instantiation */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(OperatorFeatures)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( OperatorFeatures, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorFeatures::unknown                 , "Unknown"               );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorFeatures::functionalCast          , "FunctionalCast"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorFeatures::scope                   , "Scope"                 );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorFeatures::none                    , "None"                  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorFeatures::regular                 , "Regular"               );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorFeatures::groupping               , "Groupping"             );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorFeatures::indexation              , "Indexation"            );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorFeatures::simpleCast              , "SimpleCast"            );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorFeatures::functionCall            , "FunctionCall"          );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorFeatures::templateInstantiation   , "TemplateInstantiation" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( OperatorFeatures, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( OperatorFeatures, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::unknown                 , "unknown"                );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::unknown                 , "invalid"                );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::functionalCast          , "functional-cast"        );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::functionalCast          , "functional_cast"        );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::functionalCast          , "functionalcast"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::scope                   , "scope"                  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::none                    , "none"                   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::regular                 , "regular"                );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::groupping               , "groupping"              );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::indexation              , "indexation"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::simpleCast              , "simple-cast"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::simpleCast              , "simple_cast"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::simpleCast              , "simplecast"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::functionCall            , "function-call"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::functionCall            , "function_call"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::functionCall            , "functioncall"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::templateInstantiation   , "template-instantiation" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::templateInstantiation   , "template_instantiation" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorFeatures::templateInstantiation   , "templateinstantiation"  );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( OperatorFeatures, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_SERIALIZE_SET(OperatorFeatures, std::set)

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_SET(OperatorFeatures, std::set)



/*! Operator type */
//#!OperatorRestrictions
enum class OperatorRestrictions : std::uint32_t
{
    unknown                    = (std::uint32_t)(-1) /*!< ! */,
    invalid                    = (std::uint32_t)(-1) /*!< ! */,
    none                       = 0x00 /*!< ! */,
    requiresNameRight          = 0x01 /*!< Requires name (identifier) at right */,
    requiresNameLeft           = 0x02 /*!< Requires name (identifier) at left */,
    requiresScopeRight         = 0x04 /*!< Requires scope operator at right */,
    requiresScopeLeft          = 0x08 /*!< Requires scope operator at left */,
    requiresScopeOrNameRight   = requiresNameRight|requiresScopeRight /*!< Requires scope operator or name (identifier) at right */,
    requiresScopeOrNameLeft    = requiresNameLeft|requiresScopeLeft /*!< Requires scope operator or name (identifier) at left */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(OperatorRestrictions)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( OperatorRestrictions, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorRestrictions::requiresScopeOrNameRight   , "RequiresScopeOrNameRight" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorRestrictions::unknown                    , "Unknown"                  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorRestrictions::requiresNameLeft           , "RequiresNameLeft"         );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorRestrictions::none                       , "None"                     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorRestrictions::requiresScopeOrNameLeft    , "RequiresScopeOrNameLeft"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorRestrictions::requiresNameRight          , "RequiresNameRight"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorRestrictions::requiresScopeRight         , "RequiresScopeRight"       );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorRestrictions::requiresScopeLeft          , "RequiresScopeLeft"        );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( OperatorRestrictions, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( OperatorRestrictions, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeOrNameRight   , "requires-scope-or-name-right" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeOrNameRight   , "requiresscopeornameright"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeOrNameRight   , "requires_scope_or_name_right" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::unknown                    , "unknown"                      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::unknown                    , "invalid"                      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresNameLeft           , "requires-name-left"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresNameLeft           , "requires_name_left"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresNameLeft           , "requiresnameleft"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::none                       , "none"                         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeOrNameLeft    , "requires-scope-or-name-left"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeOrNameLeft    , "requiresscopeornameleft"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeOrNameLeft    , "requires_scope_or_name_left"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresNameRight          , "requires-name-right"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresNameRight          , "requires_name_right"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresNameRight          , "requiresnameright"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeRight         , "requires-scope-right"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeRight         , "requiresscoperight"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeRight         , "requires_scope_right"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeLeft          , "requires-scope-left"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeLeft          , "requiresscopeleft"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorRestrictions::requiresScopeLeft          , "requires_scope_left"          );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( OperatorRestrictions, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_SERIALIZE_SET(OperatorRestrictions, std::set)

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_SET(OperatorRestrictions, std::set)



/*! Operator affixation. Prefixation, infixation, suffixation -> affixation. Affix - https://ru.wikipedia.org/wiki/%D0%90%D1%84%D1%84%D0%B8%D0%BA%D1%81, https://en.wikipedia.org/wiki/Affix */
//#!OperatorAffixation
enum class OperatorAffixation : std::uint32_t
{
    unknown   = (std::uint32_t)(-1) /*!< ! */,
    invalid   = (std::uint32_t)(-1) /*!< ! */,
    none      = 0x00 /*!< ! */,
    prefix    = 0x01 /*!< Prefix mode allowed for operator */,
    postfix   = 0x02 /*!< Postfix mode allowed for operator */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(OperatorAffixation)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( OperatorAffixation, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorAffixation::prefix    , "Prefix"  );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorAffixation::unknown   , "Unknown" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorAffixation::none      , "None"    );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorAffixation::postfix   , "Postfix" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( OperatorAffixation, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( OperatorAffixation, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAffixation::prefix    , "prefix"  );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAffixation::unknown   , "unknown" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAffixation::unknown   , "invalid" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAffixation::none      , "none"    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAffixation::postfix   , "postfix" );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( OperatorAffixation, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_SERIALIZE_SET(OperatorAffixation, std::set)

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_SET(OperatorAffixation, std::set)



/*! Operator associativity. Ассоциативность (от лат. associatio) — свойство операций, позволяющее восстановить последовательность их выполнения при отсутствии явных указаний на очерёдность при равном приоритете - left - приоритетнее */
//#!OperatorAssociativity
enum class OperatorAssociativity : std::uint32_t
{
    unknown       = (std::uint32_t)(-1) /*!< ! */,
    invalid       = (std::uint32_t)(-1) /*!< ! */,
    none          = 0x00 /*!< ! */,
    leftToRight   = 0x01 /*!< left-hand operator  (Left-to-right →) левая ассоциативность, при которой вычисление выражения происходит слева направо */,
    leftHand      = 0x01 /*!< left-hand operator  (Left-to-right →) левая ассоциативность, при которой вычисление выражения происходит слева направо */,
    left          = 0x01 /*!< left-hand operator  (Left-to-right →) левая ассоциативность, при которой вычисление выражения происходит слева направо */,
    rightToLeft   = 0x02 /*!< right-hand operator (Right-to-left ←) правая ассоциативность — справа налево */,
    rightHand     = 0x02 /*!< right-hand operator (Right-to-left ←) правая ассоциативность — справа налево */,
    right         = 0x02 /*!< right-hand operator (Right-to-left ←) правая ассоциативность — справа налево */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(OperatorAssociativity)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( OperatorAssociativity, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorAssociativity::leftToRight   , "LeftToRight" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorAssociativity::unknown       , "Unknown"     );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorAssociativity::none          , "None"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorAssociativity::rightToLeft   , "RightToLeft" );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( OperatorAssociativity, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( OperatorAssociativity, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::leftToRight   , "left-to-right" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::leftToRight   , "lefthand"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::leftToRight   , "left_to_right" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::leftToRight   , "lefttoright"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::leftToRight   , "left-hand"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::leftToRight   , "left"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::leftToRight   , "left_hand"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::unknown       , "unknown"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::unknown       , "invalid"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::none          , "none"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::rightToLeft   , "right"         );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::rightToLeft   , "right-to-left" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::rightToLeft   , "right_to_left" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::rightToLeft   , "righttoleft"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::rightToLeft   , "right-hand"    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::rightToLeft   , "right_hand"    );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorAssociativity::rightToLeft   , "righthand"     );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( OperatorAssociativity, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_SERIALIZE_SET(OperatorAssociativity, std::set)

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_SET(OperatorAssociativity, std::set)



/*! Operators arity - unary, binary, ternary etc. Also holds prefix/postfix attribute for unary operators. */
//#!OperatorArity
enum class OperatorArity : std::uint32_t
{
    unknown          = (std::uint32_t)(-1) /*!< ! */,
    invalid          = (std::uint32_t)(-1) /*!< ! */,
    none             = 0x00 /*!< Zero number of operands */,
    nonary           = 0x00 /*!< Zero number of operands */,
    unary            = 0x01 /*!< Unary operator. Mutually exclusive with `ternary` and `nAry` flags. Can be combined with `binary`. */,
    binary           = 0x02 /*!< Binary operator. Mutually exclusive with `ternary` and `nAry` flags. Can be combined with `unary`. */,
    ternary          = 0x04 /*!< Ternary operator. Mutually exclusive with other arity flags. */,
    nAry             = 0x08 /*!< N-arity. Mutually exclusive with other arity flags. */,
    unaryBinary      = unary  | binary /*!< Unary or binary operator */,
    fixedArityMask   = unary | binary | ternary /*!< Mask to pick out fixed size arity */,
    arityMask        = fixedArityMask | nAry /*!< Mask to pick out arity */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_FLAGS(OperatorArity)

MARTY_CPP_ENUM_FLAGS_SERIALIZE_BEGIN( OperatorArity, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::unknown          , "Unknown"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::none             , "None"           );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::ternary          , "Ternary"        );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::unary            , "Unary"          );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::binary           , "Binary"         );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::unaryBinary      , "UnaryBinary"    );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::nAry             , "NAry"           );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::fixedArityMask   , "FixedArityMask" );
    MARTY_CPP_ENUM_FLAGS_SERIALIZE_ITEM( OperatorArity::arityMask        , "ArityMask"      );
MARTY_CPP_ENUM_FLAGS_SERIALIZE_END( OperatorArity, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_BEGIN( OperatorArity, std::map, 1 )
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unknown          , "unknown"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unknown          , "invalid"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::none             , "none"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::none             , "nonary"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::ternary          , "ternary"          );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unary            , "unary"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::binary           , "binary"           );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unaryBinary      , "unary-binary"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unaryBinary      , "unary_binary"     );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::unaryBinary      , "unarybinary"      );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::nAry             , "n-ary"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::nAry             , "n_ary"            );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::nAry             , "nary"             );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::fixedArityMask   , "fixed-arity-mask" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::fixedArityMask   , "fixed_arity_mask" );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::fixedArityMask   , "fixedaritymask"   );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::arityMask        , "arity-mask"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::arityMask        , "arity_mask"       );
    MARTY_CPP_ENUM_FLAGS_DESERIALIZE_ITEM( OperatorArity::arityMask        , "aritymask"        );
MARTY_CPP_ENUM_FLAGS_DESERIALIZE_END( OperatorArity, std::map, 1 )

MARTY_CPP_ENUM_FLAGS_SERIALIZE_SET(OperatorArity, std::set)

MARTY_CPP_ENUM_FLAGS_DESERIALIZE_SET(OperatorArity, std::set)

} // namespace expressions
} // namespace marty

